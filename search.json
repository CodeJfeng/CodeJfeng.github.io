[{"title":"Spring原理","path":"/2025/09/13/Spring-Base/","content":"Spring 基础框架Spring 概述Spring是分层的Java SEEE应用full-stack轻量级开源框架,以**IoC ( Inverse Of Control:反转控制)和AOP (Aspect oriented Progr anming:面向切面编程)**为内核，提供了展现层SpringMVC和持久层Spring JDBC以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的Java EE企业应用开源框架。 Spring 优势 方便解耦，简化开发通过Spring提供的IoC容器,可以将对象间的依赖关系交由Spring 进行控制,避免硬编码所造成的过度程序耦合。用户也不必再为单例模式类、属性文件解析等这些很底层的需求编写代码，可以更专注于上层的应用。 AOP编程的支持通过Spring的AOP功能，方便进行面向切面的编程，许多不容易用传统OOP实现的功能可以通过AOP轻松应付。 声明式事务的支持可以将我们从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活的进行事务的管理，提高开发效率和质量。 方便程序的测试可以非容器依赖的编程方式进行几乎所有的测试工作，测试不再是昂贵的操作，而是随手可做的事情。 方便集成各种优秀框架Spring可以降低各种框架的使用难度,提供了对各种优秀框架(Struts、Hibernate. Hessian、Quartz等)的直接支持。 降低JavaEE API的使用难度Spring对JavaEE API (如JDBC、JavaMail、远程调用等)进行了薄薄的封装层，使这些API的使用难度大为降低。 Java源码是经典学习范例Spring的源代码设计精妙、结构清晰、匠心独用，处处体现着大师对Java设计模式灵活运用以及对Java技术的高深造诣。它的源代码无疑是Java技术的最佳实践的范例 什么是程序耦合？我们在开发中，会写很多的类,而有些类之间不可避免的产生依赖关系,这种依赖关系称之为耦合。有些依赖关系是必须的，有些依赖关系可以通过优化代码来解除的。请看下面的示例代码: /** * 客户的业务层实现类 */public class CustomerService implements ICustormerService private ICustomerService custormerDao = new CustomerDaoImp(); 上面的代码表示:业务层调用持久层，并且此时业务层在依赖持久层的接口和实现类。如果此时没有持久层实现类，编译将不能通过。这种依赖关系就是我们可以通过优化代码解决的。 什么是控制反转？ 控制反转(Inversion of Control,缩写为IoC)，是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做依赖注入(Dependency Injection,简称DI)，还有一种方式叫“依赖查找” (Dependency Lookup)。通过控制反转,对象在被创建的时候，由一个调控系统内所有对象的外界实体，将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。——摘自百度百科 Spring的体系结构Spring框架至今已集成了20多个模块，这些模块分布在以下模块中： 核心容器（Core Container） 数据访问集成（Data AccessIntegration）层 Web层 AOP（Aspect Oriented Programming）模块 植入（Instrumentation）模块 消息传输（Messaging） 测试（Test）模块 Spring的核心容器是其他模块建立的基础，有Spring-core、Spring-beans、Spring-context、Spring-context-support和Spring-expression（String表达式语言）等模块组成。 Spring-core模块：提供了框架的基本组成部分，包括控制反转（Inversion of Control，IOC）和依赖注入（Dependency Injection，DI）功能。 Spring-beans模块：提供了BeanFactory，是工厂模式的一个经典实现，Spring将管理对象称为Bean。 Spring-context模块：建立在Core和Beans模块的基础之上，提供一个框架式的对象访问方式，是访问定义和配置的任何对象的媒介。ApplicationContext接口是Context模块的焦点。 Spring-context-support模块：支持整合第三方库到Spring应用程序上下文，特别是用于高速缓存（EhCache、JCache）和任务调度（CommonJ、Quartz）的支持。 Spring-expression模块：提供了强大的表达式语言去支持运行时查询和操作对象图。这是对JSP2.1规范中规定的统一表达式语言（Unified EL）的扩展。该语言支持设置和获取属性值、属性分配、方法调用、访问数组、集合和索引器的内容、逻辑和算术运算、变量命名以及从Spring的IOC容器中以名称检索对象。它还支持列表投影、选择以及常用的列表聚合。","tags":["java","Spring"]},{"title":"Java的设计模式实例","path":"/2025/09/11/Java-Design/","content":"学习设计模式的必要性设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。 正确使用设计模式具有以下优点： 可以提高程序员的思维能力、编程能力和设计能力。 使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期。 使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强。 设计模式的分类 创建型模型用于描述“怎样创建对象”，它的主要特点是“将对象的创建与使用分离”。GoF（四人组）书中提供了单例、原型、工厂方法、抽象工厂、建造者等 5 种创建型模式。 结构型模式用于描述如何将类或对象按某种布局组成更大的结构，GoF（四人组）书中提供了代理、适配器、桥接、装饰、外观、享元、组合等 7 种结构型模式。 行为型模式用于描述类或对象之间怎样相互协作共同完成单个对象无法单独完成的任务，以及怎样分配职责。GoF（四人组）书中提供了模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器等 11 种行为型模式。 创建者模式什么是创建者模式？创建型模式的主要关注点是怎样创建对象？，它的主要特点是将对象的创建与使用分离。这样可以降低系统的耦合度，使用者不需要关注对象的创建细节。创建型模式分类及详细教程如下： 单例模式单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。 单例模式的实现单例设计模式分类两种： 饿汉式： 类加载就会导致该单实例对象被创建 适合在类的实例化代价较小或总是需要使用的情况下使用。 由于在类加载时就创建实例，因此不需要考虑线程安全问题。 懒汉式：类加载不会导致该单实例对象被创建，而是首次使用该对象时才会创建 在类加载时就实例化对象，不管是否需要使用。 适合在实例化代价较大或不常用的情况下使用。 需要考虑线程安全问题，可能会导致多线程环境下的安全隐患。这两种模式各有优缺点，选择时需根据具体情况而定。 饿汉式-方式1 (静态变量方式)静态变量创建类的对象 public class Singleton //私有构造方法 private Singleton() ​ //在成员位置创建该类的对象 private static Singleton instance = new Singleton();​ //对外提供静态方法获取该对象 public static Singleton getInstance() return instance; 说明该方式在成员位置声明Singleton类型的静态变量，并创建Singleton类的对象instance。instance对象是随着类的加载而创建的。如果该对象足够大的话，而一直没有使用就会造成内存的浪费。 饿汉式-方式2 (静态代码块方式)静态代码块中创建类的对象 public class Singleton ​ //私有构造方法 private Singleton() ​ //在成员位置创建该类的对象 private static Singleton instance;​ static instance = new Singleton(); ​ //对外提供静态方法获取该对象 public static Singleton getInstance() return instance; 说明该方式在成员位置声明Singleton类型的静态变量，而对象的创建是在静态代码块中，也是对着类的加载而创建。所以和饿汉式的方式1基本上一样，当然该方式也存在内存浪费问题。 懒汉方式1–线程不安全/** * 懒汉式 * 线程不安全 */public class Singleton //私有构造方法 private Singleton() ​ //在成员位置创建该类的对象 private static Singleton instance;​ //对外提供静态方法获取该对象 public static Singleton getInstance() ​ if(instance == null) instance = new Singleton(); return instance; 说明从上面代码我们可以看出该方式在成员位置声明Singleton类型的静态变量，并没有进行对象的赋值操作，那么什么时候赋值的呢？当调用getInstance()方法获取Singleton类的对象的时候才创建Singleton类的对象，这样就实现了懒加载的效果。但是，如果是多线程环境，会出现线程安全问题。 解释下为什么会存在线程问题：假设现在有两个线程t1和t2同时调用getInstance() 方法，t1刚判断instance null为true进入内部吗，刚要进行创建，此时正好丢失CPU执行权，进入阻塞状态，而t2获得CPU执行权，也进行了instance null判断，发现也是true，就进入了内部代码进行创建，此时我们发现t1和t2都会执行内部的new代码，从而获得了两个不同的实例对象。 懒汉方式2–线程安全/** * 懒汉式 * 线程安全 */public class Singleton //私有构造方法 private Singleton() ​ //在成员位置创建该类的对象 private static Singleton instance;​ //对外提供静态方法获取该对象 public static synchronized Singleton getInstance() ​ if(instance == null) instance = new Singleton(); return instance; 说明该方式也实现了懒加载效果，同时又解决了线程安全问题。但是在getInstance()方法上添加了synchronized关键字，导致该方法的执行效果特别低。从上面代码我们可以看出，其实就是在初始化instance的时候才会出现线程安全问题，一旦初始化完成就不存在了。 懒汉式-方式3（双重检查锁）再来讨论一下懒汉模式中加锁的问题，对于 getInstance() 方法来说，绝大部分的操作都是读操作，读操作是线程安全的，所以我们没必让每个线程必须持有锁才能调用该方法，我们需要调整加锁的时机。由此也产生了一种新的实现模式：双重检查锁模式 /** * 双重检查方式 */public class Singleton ​ //私有构造方法 private Singleton() ​ private static Singleton instance;​ //对外提供静态方法获取该对象 public static Singleton getInstance() //第一次判断，如果instance不为null，不进入抢锁阶段，直接返回实例 if(instance == null) synchronized (Singleton.class) //抢到锁之后再次判断是否为null if(instance == null) instance = new Singleton(); return instance; 双重检查锁模式是一种非常好的单例实现模式，解决了单例、性能、线程安全问题，上面的双重检测锁模式看上去完美无缺，其实是存在问题，在多线程的情况下，可能会出现空指针问题，出现问题的原因是JVM在实例化对象的时候会进行优化和指令重排序操作。 要解决双重检查锁模式带来空指针异常的问题，只需要使用volatile关键字, volatile关键字可以保证可见性和有序性。在单例模式中，volatile关键字主要用于确保多线程环境下的可见性和禁止指令重排序。当一个类使用懒汉式的方式创建单例对象时，volatile 可以防止由于指令重排序导致的问题。通过使用volatile关键字，可以保证在多线程环境下对 instance 的可见性和防止指令重排序： /** 使用 volatile 防止指令重排 */public class Singleton private static volatile Singleton instance; private Singleton() public static Singleton getInstance() if (instance == null) synchronized (Singleton.class) if (instance == null) instance = new Singleton(); return instance; 在上面的代码中，将 instance 声明为 volatile 可以确保在一个线程修改了 instance 的值后，其他线程能够立即看到这个变化，避免了由于指令重排序而导致的问题。 这种方式通常称为双重检查锁定（Double-Checked Locking）机制，通过在内部的 if (instance null) 判断之前和之后都进行一次检查，以保证线程安全且效率较高。需要注意的是，这种方式要求 instance 被声明为 volatile。 小结添加volatile关键字之后的双重检查锁模式是一种比较好的单例实现模式，能够保证在多线程的情况下线程安全也不会有性能问题。 懒汉式-方式4（静态内部类方式）静态内部类单例模式中实例由内部类创建，由于 JVM 在加载外部类的过程中, 是不会加载静态内部类的, 只有内部类的属性方法被调用时才会被加载, 并初始化其静态属性。静态属性由于被static修饰，保证只被实例化一次，并且严格保证实例化顺序。 /** * 静态内部类方式 */public class Singleton ​ //私有构造方法 private Singleton() ​ private static class SingletonHolder private static final Singleton INSTANCE = new Singleton(); ​ //对外提供静态方法获取该对象 public static Singleton getInstance() return SingletonHolder.INSTANCE; 说明第一次加载Singleton类时不会去初始化INSTANCE，只有第一次调用getInstance，虚拟机加载SingletonHolder 小结静态内部类单例模式是一种优秀的单例模式，是开源项目中比较常用的一种单例模式。在没有加任何锁的情况下，保证了多线程下的安全，并且没有任何性能影响和空间的浪费。 枚举方式枚举类实现单例模式是极力推荐的单例实现模式，因为枚举类型是线程安全的，并且只会装载一次，设计者充分的利用了枚举的这个特性来实现单例模式，枚举的写法非常简单，而且枚举类型是所用单例实现中唯一一种不会被破坏的单例实现模式。 /** * 枚举方式 */public enum Singleton INSTANCE; 枚举方式属于饿汉式方式。 两种破坏单例模式的场景及如何防止的代码演示前面我们演示了单例模式的多种Java代码的实现方式，虽然看上去完美无缺的，但是其实还是存在一定的问题的，在某些场景下，可以破坏单例模式，从而创建出来多个实例。接下来，我们一起看下破坏单例模式的两个场景，以及每个场景我们应该如何预防被破坏。 破坏单例模式两种场景使上面定义的单例类（Singleton）可以创建多个对象，枚举方式除外。有两种方式，分别是序列化和反射。 序列化反序列化方式破坏单例模式演示Singleton类：(内部静态类构造单例对象) public class Singleton implements Serializable ​ //私有构造方法 -- 内部静态类 private Singleton() ​ private static class SingletonHolder private static final Singleton INSTANCE = new Singleton(); ​ //对外提供静态方法获取该对象 public static Singleton getInstance() return SingletonHolder.INSTANCE; Test类： public class Test public static void main(String[] args) throws Exception //往文件中写对象 //writeObject2File(); //从文件中读取对象 Singleton s1 = readObjectFromFile(); Singleton s2 = readObjectFromFile();​ //判断两个反序列化后的对象是否是同一个对象 System.out.println(s1 == s2); ​ private static Singleton readObjectFromFile() throws Exception //创建对象输入流对象 ObjectInputStream ois = new ObjectInputStream(new FileInputStream(C:\\\\Users\\\\Think\\\\Desktop\\\\a.txt)); //第一个读取Singleton对象 Singleton instance = (Singleton) ois.readObject();​ return instance; ​ public static void writeObject2File() throws Exception //获取Singleton类的对象 Singleton instance = Singleton.getInstance(); //创建对象输出流 ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(C:\\\\Users\\\\Think\\\\Desktop\\\\a.txt)); //将instance对象写出到文件中 oos.writeObject(instance); 上面代码运行结果是false，表明序列化和反序列化已经破坏了单例设计模式。 反射方式破坏单例模式演示Singleton类： public class Singleton ​ //私有构造方法 private Singleton() private static volatile Singleton instance;​ //对外提供静态方法获取该对象 -- 双重检查锁 public static Singleton getInstance() ​ if(instance != null) return instance; ​ synchronized (Singleton.class) if(instance != null) return instance; instance = new Singleton(); return instance; Test类： public class Test public static void main(String[] args) throws Exception //获取Singleton类的字节码对象 Class clazz = Singleton.class; //获取Singleton类的私有无参构造方法对象 Constructor constructor = clazz.getDeclaredConstructor(); //取消访问检查 constructor.setAccessible(true);​ //创建Singleton类的对象s1 Singleton s1 = (Singleton) constructor.newInstance(); //创建Singleton类的对象s2 Singleton s2 = (Singleton) constructor.newInstance();​ //判断通过反射创建的两个Singleton对象是否是同一个对象 System.out.println(s1 == s2); 说明反射通过 setAccessible(true) 把 private 构造方法“撬开”，再绕过 JVM 的访问检查直接 new 实例，因此完全无视你写的单例逻辑。上面代码运行结果是false，表明序列化和反序列化已经破坏了单例设计模式 注意：枚举方式实现的单例模式不会出现这两个问题。 如何解决破坏单例的问题在Singleton类中添加readResolve()方法，在反序列化时被反射调用，如果定义了这个方法，就返回这个方法的值，如果没有定义，则返回新new出来的对象。 序列化、反序列方式破坏单例模式的解决方法在Singleton类中添加readResolve()方法，在反序列化时被反射调用，如果定义了这个方法，就返回这个方法的值，如果没有定义，则返回新new出来的对象。Singleton类： public class Singleton implements Serializable ​ //私有构造方法 private Singleton() ​ private static class SingletonHolder private static final Singleton INSTANCE = new Singleton(); ​ //对外提供静态方法获取该对象 public static Singleton getInstance() return SingletonHolder.INSTANCE; /** * 下面是为了解决序列化反序列化破解单例模式 */ private Object readResolve() return SingletonHolder.INSTANCE; 源码解析：ObjectInputStream类： public final Object readObject() throws IOException, ClassNotFoundException ... // if nested read, passHandle contains handle of enclosing object int outerHandle = passHandle; try Object obj = readObject0(false);//重点查看readObject0方法 ..... private Object readObject0(boolean unshared) throws IOException ... try switch (tc) ... case TC_OBJECT: return checkResolve(readOrdinaryObject(unshared));//重点查看readOrdinaryObject方法 ... finally depth--; bin.setBlockDataMode(oldMode); private Object readOrdinaryObject(boolean unshared) throws IOException ... //isInstantiable 返回true，执行 desc.newInstance()，通过反射创建新的单例类， obj = desc.isInstantiable() ? desc.newInstance() : null; ... // 在Singleton类中添加 readResolve 方法后 desc.hasReadResolveMethod() 方法执行结果为true if (obj != null handles.lookupException(passHandle) == null desc.hasReadResolveMethod()) // 通过反射调用 Singleton 类中的 readResolve 方法，将返回值赋值给rep变量 // 这样多次调用ObjectInputStream类中的readObject方法，继而就会调用我们定义的readResolve方法，所以返回的是同一个对象。 Object rep = desc.invokeReadResolve(obj); ... return obj; 数据流向：readObject() → readObject0() → readOrdinaryObject() 目的是把磁盘里的字节流还原成 Java 对象。 desc.isInstantiable() ? desc.newInstance() : null; desc 是类描述符（ObjectStreamClass）。 isInstantiable() 只要你的类不是 enum 且有无参构造就返回 true。 newInstance() 通过反射 Constructor.newInstance() 强行 new 一个新对象，完全绕过构造方法里的单例检查。 这一步就解释了为什么不加 readResolve() 时单例会被破坏——每次反序列化都 new 一个。 desc.hasReadResolveMethod() 如果你在类里写了readResolve(),这里就会返回 true。 小结Java 反序列化时，如果目标类里写了 readResolve()，就先用反射“new”出一个新实例，再立刻调用你的 readResolve() 把那个新实例“掉包”成你指定的单例，最后把单例返回给使用者。 反射方式破解单例的解决方法public class Singleton ​ //私有构造方法 private Singleton() /* 反射破解单例模式需要添加的代码 */ if(instance != null) // 第一次反射进来时 instance 为 null，拦不住； // 但第二次反射再进来时 instance 已非 null，可抛出异常阻止 throw new RuntimeException(); private static volatile Singleton instance;​ //对外提供静态方法获取该对象 public static Singleton getInstance() ​ // if(instance != null) return instance; ​ synchronized (Singleton.class) if(instance != null) return instance; instance = new Singleton(); return instance; 说明这种方式比较好理解。当通过反射方式调用构造方法进行创建创建时，直接抛异常。不运行此中操作。 注意：这种写法只能挡第二次及以后的反射；完全杜绝还是得用枚举。 工厂模式假设设计一个咖啡店点餐系统设计一个咖啡类（Coffee），并定义其两个子类（美式咖啡【AmericanCoffee】和拿铁咖啡【LatteCoffee】）；再设计一个咖啡店类（CoffeeStore），咖啡店具有点咖啡的功能。 具体类的设计如下： 概念在java中，万物皆对象，这些对象都需要创建，如果创建的时候直接new该对象，就会对该对象耦合严重，假如我们要更换对象，所有new对象的地方都需要修改一遍，这显然违背了软件设计的开闭原则。如果我们使用工厂来生产对象，我们就只和工厂打交道就可以了，彻底和对象解耦，如果要更换对象，直接在工厂里更换该对象即可，达到了与对象解耦的目的；所以说，工厂模式最大的优点就是：解耦。结构本章中会介绍三种工厂的使用： 简单工厂模式（不属于GOF的23种经典设计模式） 工厂方法模式 抽象工厂模式 简单工厂模式简单工厂不是一种设计模式，反而比较像是一种编程习惯。 简单工厂包含如下角色： 具体工厂 ：提供了创建产品的方法，调用者通过该方法来获取产品。 抽象产品 ：定义了产品的规范，描述了产品的主要特性和功能。 具体产品 ：实现或者继承抽象产品的子类 现在使用简单工厂对上面案例进行改进，类图如下： 工厂类代码如下： public class SimpleCoffeeFactory ​ public Coffee createCoffee(String type) Coffee coffee = null; if(americano.equals(type)) coffee = new AmericanoCoffee(); else if(latte.equals(type)) coffee = new LatteCoffee(); return coffee; 工厂（factory）处理创建对象的细节，一旦有了SimpleCoffeeFactory，CoffeeStore类中的orderCoffee()就变成此对象的客户，后期如果需要Coffee对象直接从工厂中获取即可。这样也就解除了和Coffee实现类的耦合，同时又产生了新的耦合，CoffeeStore对象和SimpleCoffeeFactory工厂对象的耦合，工厂对象和商品对象的耦合。 后期如果再加新品种的咖啡，我们势必要需求修改SimpleCoffeeFactory的代码，违反了开闭原则。工厂类的客户端可能有很多，比如创建美团外卖等，这样只需要修改工厂类的代码，省去其他的修改操作。 优缺点优点封装了创建对象的过程，可以通过参数直接获取对象。把对象的创建和业务逻辑层分开，这样以后就避免了修改客户代码，如果要实现新产品直接修改工厂类，而不需要在原代码中修改，这样就降低了客户代码修改的可能性，更加容易扩展。缺点增加新产品时还是需要修改工厂类的代码，违背了“开闭原则”。 静态工厂模式在开发中也有一部分人将工厂类中的创建对象的功能定义为静态的，这个就是静态工厂模式，它也不是23种设计模式中的。代码如下： public class SimpleCoffeeFactory ​ public static Coffee createCoffee(String type) Coffee coffee = null; if(americano.equals(type)) coffee = new AmericanoCoffee(); else if(latte.equals(type)) coffee = new LatteCoffee(); return coffe; 工厂方法模式针对上例中的缺点，使用工厂方法模式就可以完美的解决，完全遵循开闭原则。概念定义一个用于创建对象的接口，让子类决定实例化哪个产品类对象。工厂方法使一个产品类的实例化延迟到其工厂的子类。结构工厂方法模式的主要角色： 抽象工厂（Abstract Factory）：提供了创建产品的接口，调用者通过它访问具体工厂的工厂方法来创建产品。 具体工厂（ConcreteFactory）：主要是实现抽象工厂中的抽象方法，完成具体产品的创建。 抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能。 具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间一一对应。实现代码如下：抽象工厂: public interface CoffeeFactory ​ Coffee createCoffee(); 具体工厂： public class LatteCoffeeFactory implements CoffeeFactory public Coffee createCoffee() return new LatteCoffee(); ​public class AmericanCoffeeFactory implements CoffeeFactory ​ public Coffee createCoffee() return new AmericanCoffee(); 咖啡店类： public class CoffeeStore ​ private CoffeeFactory factory;​ public CoffeeStore(CoffeeFactory factory) this.factory = factory; ​ public Coffee orderCoffee(String type) Coffee coffee = factory.createCoffee(); coffee.addMilk(); coffee.addsugar(); return coffee; 从以上的编写的代码可以看到，要增加产品类时也要相应地增加工厂类，不需要修改工厂类的代码了，这样就解决了简单工厂模式的缺点。 工厂方法模式是简单工厂模式的进一步抽象。由于使用了多态性，工厂方法模式保持了简单工厂模式的优点，而且克服了它的缺点。 优缺点优点： 用户只需要知道具体工厂的名称就可得到所要的产品，无须知道产品的具体创建过程； 在系统增加新的产品时只需要添加具体产品类和对应的具体工厂类，无须对原工厂进行任何修改，满足开闭原则；缺点： 每增加一个产品就要增加一个具体产品类和一个对应的具体工厂类，这增加了系统的复杂度。 抽象工厂模式前面介绍的工厂方法模式中考虑的是一类产品的生产，如畜牧场只养动物、电视机厂只生产电视机等。这些工厂只生产同种类产品，同种类产品称为同等级产品，也就是说：工厂方法模式只考虑生产同等级的产品，但是在现实生活中许多工厂是综合型的工厂，能生产多等级（种类） 的产品，如电器厂既生产电视机又生产洗衣机或空调，大学既有软件专业又有生物专业等。本节要介绍的抽象工厂模式将考虑多等级产品的生产，将同一个具体工厂所生产的位于不同等级的一组产品称为一个产品族，下图所示横轴是产品等级，也就是同一类产品；纵轴是产品族，也就是同一品牌的产品，同一品牌的产品产自同一个工厂。 概念抽象工厂模式是一种为访问类提供一个创建一组相关或相互依赖对象的接口，且访问类无须指定所要产品的具体类就能得到同族的不同等级的产品的模式结构。抽象工厂模式是工厂方法模式的升级版本，工厂方法模式只生产一个等级的产品，而抽象工厂模式可生产多个等级的产品。 结构抽象工厂模式的主要角色如下： 抽象工厂（Abstract Factory）：提供了创建产品的接口，它包含多个创建产品的方法，可以创建多个不同等级的产品。 具体工厂（Concrete Factory）：主要是实现抽象工厂中的多个抽象方法，完成具体产品的创建。 抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能，抽象工厂模式有多个抽象产品。 具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它 同具体工厂之间是多对一的关系。 实现现咖啡店业务发生改变，不仅要生产咖啡还要生产甜点，如提拉米苏、抹茶慕斯等，要是按照工厂方法模式，需要定义提拉米苏类、抹茶慕斯类、提拉米苏工厂、抹茶慕斯工厂、甜点工厂类，很容易发生类爆炸情况。其中拿铁咖啡、美式咖啡是一个产品等级，都是咖啡；提拉米苏、抹茶慕斯也是一个产品等级；拿铁咖啡和提拉米苏是同一产品族（也就是都属于意大利风味），美式咖啡和抹茶慕斯是同一产品族（也就是都属于美式风味）。所以这个案例可以使用抽象工厂模式实现。类图如下：代码如下：抽象工厂类： public interface DessertFactory ​ Coffee createCoffee();​ Dessert createDessert(); 具体工厂类： //美式甜点工厂public class AmericanDessertFactory implements DessertFactory ​ public Coffee createCoffee() return new AmericanCoffee(); ​ public Dessert createDessert() return new MatchaMousse(); //意大利风味甜点工厂public class ItalyDessertFactory implements DessertFactory ​ public Coffee createCoffee() return new LatteCoffee(); ​ public Dessert createDessert() return new Tiramisu(); 优缺点优点当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。缺点当产品族中需要增加一个新的产品时，所有的工厂类都需要进行修改。使用场景当需要创建的对象是一系列相互关联或相互依赖的产品族时，如电器工厂中的电视机、洗衣机、空调等。系统中有多个产品族，但每次只使用其中的某一族产品。如有人只喜欢穿某一个品牌的衣服和鞋。系统中提供了产品的类库，且所有产品的接口相同，客户端不依赖产品实例的创建细节和内部结构。如：输入法换皮肤，一整套一起换。生成不同操作系统的程序。 模式扩展简单工厂+配置文件解除耦合可以通过工厂模式+配置文件的方式解除工厂对象和产品对象的耦合。在工厂类中加载配置文件中的全类名，并创建对象进行存储，客户端如果需要对象，直接进行获取即可。第一步：定义配置文件为了演示方便，我们使用properties文件作为配置文件，名称为bean.properties american=com.itheima.pattern.factory.config_factory.AmericanCoffeelatte=com.itheima.pattern.factory.config_factory.LatteCoffee 第二步：改进工厂类 public class CoffeeFactory ​ private static MapString, Coffee map = new HashMap();​ static Properties p = new Properties(); InputStream is = CoffeeFactory.class.getClassLoader().getResourceAsStream(bean.properties); try p.load(is); //遍历Properties集合对象 SetObject keys = p.keySet(); for (Object key : keys) //根据键获取值（全类名） String className = p.getProperty((String) key); //获取字节码对象 Class clazz = Class.forName(className); Coffee obj = (Coffee) clazz.newInstance(); map.put((String)key,obj); catch (Exception e) e.printStackTrace(); ​ public static Coffee createCoffee(String name) ​ return map.get(name); 静态成员变量用来存储创建的对象（键存储的是名称，值存储的是对应的对象），而读取配置文件以及创建对象写在静态代码块中，目的就是只需要执行一次。 源码解析-Collection.Iterator方法public class Demo public static void main(String[] args) ListString list = new ArrayList(); list.add(1); list.add(2); list.add(2);​ //获取迭代器对象 IteratorString it = list.iterator(); //使用迭代器遍历 while(it.hasNext()) String ele = it.next(); System.out.println(ele); 使用迭代器遍历集合，获取集合中的元素。而单列集合获取迭代器的方法就使用到了工厂方法模式。我们看通过类图看看结构：Collection接口是抽象工厂类，ArrayList是具体的工厂类；Iterator接口是抽象商品类，ArrayList类中的Iter内部类是具体的商品类。在具体的工厂类中iterator()方法创建具体的商品类的对象。 原型模式概述所谓原型模式，即：用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型对象相同的新对象。使用场景原型模式适用于需要频繁创建相似对象的场景，通过克隆可以节省资源并保持对象状态的一致性。结构原型模式包含如下角色： 抽象原型类：规定了具体原型对象必须实现的的 clone() 方法。 具体原型类：实现抽象原型类的 clone() 方法，它是可被复制的对象。 访问类：使用具体原型类中的 clone() 方法来复制新的对象。接口类图如下 原型模式实现原型模式的克隆分为浅克隆和深克隆。 浅克隆：创建一个新对象，新对象的属性和原来对象完全相同，对于非基本类型属性，仍指向原有属性所指向的对象的内存地址。深克隆：创建一个新对象，属性中引用的其他对象也会被克隆，不再指向原有对象地址。Java中的Object类中提供了 clone() 方法来实现浅克隆。 Cloneable 接口是上面的类图中的抽象原型类，而实现了Cloneable接口的子实现类就是具体的原型类。代码如下： RealizeType(具体实现的原型类) public class Realizetype implements Cloneable ​ public Realizetype() System.out.println(具体的原型对象创建完成！); ​ @Override protected Realizetype clone() throws CloneNotSupportedException System.out.println(具体原型复制成功！); return (Realizetype) super.clone(); PrototypeTest(测试访问类) public class PrototypeTest public static void main(String[] args) throws CloneNotSupportedException Realizetype r1 = new Realizetype(); Realizetype r2 = r1.clone();​ System.out.println(对象r1和r2是同一个对象？ + (r1 == r2)); 输出结果是false，表明这个r1和r2不是同一个对象，并且只有在r1创建时Realizetype的构造方法执行了一次，调用clone方法时并不会触发构造方法，而是触发实现的clone方法。 原型模式生成三好学生同一学校的“三好学生”奖状除了获奖人姓名不同，其他都相同，可以使用原型模式复制多个“三好学生”奖状出来，然后在修改奖状上的名字即可。类图如下：代码实现： //奖状类public class Citation implements Cloneable private String name;​ public void setName(String name) this.name = name; ​ public String getName() return (this.name); ​ public void show() System.out.println(name + 同学：在2020学年第一学期中表现优秀，被评为三好学生。特发此状！); ​ @Override public Citation clone() throws CloneNotSupportedException return (Citation) super.clone(); ​//测试访问类public class CitationTest public static void main(String[] args) throws CloneNotSupportedException Citation c1 = new Citation(); c1.setName(张三);​ //复制奖状 Citation c2 = c1.clone(); //将奖状的名字修改李四 c2.setName(李四);​ c1.show(); c2.show(); 我们会发现，在调用c1.show();打印的学生是张三，调用c2.show();打印的学生是李四，成功实现了克隆后属性的修改。 原型模式应用场景 对象的创建非常复杂，可以使用原型模式快捷的创建对象。 性能和安全要求比较高。 原型模式扩展（深克隆）将上面的“三好学生”奖状的案例中Citation类的name属性修改为Student类型的属性。代码如下： //奖状类public class Citation implements Cloneable private Student stu;​ public Student getStu() return stu; ​ public void setStu(Student stu) this.stu = stu; ​ void show() System.out.println(stu.getName() + 同学：在2020学年第一学期中表现优秀，被评为三好学生。特发此状！); ​ @Override public Citation clone() throws CloneNotSupportedException return (Citation) super.clone(); ​//学生类public class Student private String name; private String address;​ public Student(String name, String address) this.name = name; this.address = address; ​ public Student() ​ public String getName() return name; ​ public void setName(String name) this.name = name; ​ public String getAddress() return address; ​ public void setAddress(String address) this.address = address; ​//测试类public class CitationTest public static void main(String[] args) throws CloneNotSupportedException ​ Citation c1 = new Citation(); Student stu = new Student(张三, 西安); c1.setStu(stu);​ //复制奖状 Citation c2 = c1.clone(); //获取c2奖状所属学生对象 Student stu1 = c2.getStu(); stu1.setName(李四);​ //判断stu对象和stu1对象是否是同一个对象 System.out.println(stu和stu1是同一个对象？ + (stu == stu1));​ c1.show(); c2.show(); 从运行结果中，我们可以得知stu和stu1是同一个对象，也就是说，浅拷贝不会针对非基本类型进行拷贝，只会仍指向原有属性所指向的对象的内存地址。stu对象和stu1对象是同一个对象，就会产生将stu1对象中name属性值改为“李四”，两个Citation（奖状）对象中显示的都是李四。这就是浅克隆的效果，对具体原型类（Citation）中的引用类型的属性进行引用的复制。这种情况需要使用深克隆，而进行深克隆需要使用对象流。代码如下： public class CitationTest1 public static void main(String[] args) throws Exception Citation c1 = new Citation(); Student stu = new Student(张三, 西安); c1.setStu(stu);​ //创建对象输出流对象 ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(C:\\\\Users\\\\Think\\\\Desktop\\\\b.txt)); //将c1对象写出到文件中 oos.writeObject(c1); oos.close();​ //创建对象出入流对象 ObjectInputStream ois = new ObjectInputStream(new FileInputStream(C:\\\\Users\\\\Think\\\\Desktop\\\\b.txt)); //读取对象 Citation c2 = (Citation) ois.readObject(); //获取c2奖状所属学生对象 Student stu1 = c2.getStu(); stu1.setName(李四);​ //判断stu对象和stu1对象是否是同一个对象 System.out.println(stu和stu1是同一个对象？ + (stu == stu1));​ c1.show(); c2.show(); 通过上面的结果，我们可以看出，stu和stu1不是同一个对象，实现了深克隆。通过序列化写入实现地址的深拷贝 注意：Citation类和Student类必须实现Serializable接口，否则会抛NotSerializableException异常。 建造者模式所谓建造者模式，即：将一个复杂对象的构建与表示分离，使得同样的构建过程可以创建不同的表示。1）分离了部件的构造(由Builder来负责)和装配(由Director负责)。 从而可以构造出复杂的对象。这个模式适用于：某个对象的构建过程 复杂的情况。2）由于实现了构建和装配的解耦。不同的构建器，相同的装配，也可以做出不同的对象；相同的构建器，不同的装配顺序也可以做出不同的对象。也就是实现了构建算法、装配算法的解耦，实现了更好的复用。3）建造者模式可以将部件和其组装过程分开，一步一步创建一个复杂的对象。用户只需要指定复杂对象的类型就可以得到该对象，而无须知道其内部的具体构造细节。 建造者模式结构建造者（Builder）模式包含如下角色： 抽象建造者类（Builder）：这个接口规定要实现复杂对象的那些部分的创建，并不涉及具体的部件对象的创建。 具体建造者类（ConcreteBuilder）：实现 Builder 接口，完成复杂产品的各个部件的具体创建方法。在构造过程完成后，提供产品的实例。 产品类（Product）：要创建的复杂对象。 指挥者类（Director）：调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建或按某种顺序创建。类图如下： 建造者模式实例生产自行车是一个复杂的过程，它包含了车架，车座等组件的生产。而车架又有碳纤维，铝合金等材质的，车座有橡胶，真皮等材质。对于自行车的生产就可以使用建造者模式。这里Bike是产品，包含车架，车座等组件；Builder是抽象建造者，MobikeBuilder和OfoBuilder是具体的建造者；Director是指挥者。类图如下： //自行车类public class Bike private String frame; private String seat;​ public String getFrame() return frame; ​ public void setFrame(String frame) this.frame = frame; ​ public String getSeat() return seat; ​ public void setSeat(String seat) this.seat = seat; ​// 抽象 builder 类public abstract class Builder ​ protected Bike mBike = new Bike();​ public abstract void buildFrame(); public abstract void buildSeat(); public abstract Bike createBike();​//摩拜单车Builder类public class MobikeBuilder extends Builder ​ @Override public void buildFrame() mBike.setFrame(铝合金车架); ​ @Override public void buildSeat() mBike.setSeat(真皮车座); ​ @Override public Bike createBike() return mBike; ​//ofo单车Builder类public class OfoBuilder extends Builder ​ @Override public void buildFrame() mBike.setFrame(碳纤维车架); ​ @Override public void buildSeat() mBike.setSeat(橡胶车座); ​ @Override public Bike createBike() return mBike; ​//指挥者类public class Director private Builder mBuilder;​ public Director(Builder builder) mBuilder = builder; ​ public Bike construct() mBuilder.buildFrame(); mBuilder.buildSeat(); return mBuilder.createBike(); ​//测试类public class Client public static void main(String[] args) showBike(new OfoBuilder()); showBike(new MobikeBuilder()); private static void showBike(Builder builder) Director director = new Director(builder); Bike bike = director.construct(); System.out.println(bike.getFrame()); System.out.println(bike.getSeat()); 注意上面示例是 Builder模式的常规用法，指挥者类 Director 在建造者模式中具有很重要的作用，它用于指导具体构建者如何构建产品，控制调用先后次序，并向调用者返回完整的产品类，但是有些情况下需要简化系统结构，可以把指挥者类和抽象建造者进行结合。 // 抽象 builder 类public abstract class Builder ​ protected Bike mBike = new Bike();​ public abstract void buildFrame(); public abstract void buildSeat(); public abstract Bike createBike(); public Bike construct() this.buildFrame(); this.BuildSeat(); return this.createBike(); 这样做确实简化了系统结构，但同时也加重了抽象建造者类的职责，也不是太符合单一职责原则，如果construct() 过于复杂，建议还是封装到 Director 中。 建造者模式优缺点优点1）建造者模式的封装性很好。使用建造者模式可以有效的封装变化，在使用建造者模式的场景中，一般产品类和建造者类是比较稳定的，因此，将主要的业务逻辑封装在指挥者类中对整体而言可以取得比较好的稳定性。 2）在建造者模式中，客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象。可以更加精细地控制产品的创建过程 。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程。 3）建造者模式很容易进行扩展。如果有新的需求，通过实现一个新的建造者类就可以完成，基本上不用修改之前已经测试通过的代码，因此也就不会对原有功能引入风险。符合开闭原则。缺点造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间的差异性很大，则不适合使用建造者模式，因此其使用范围受到一定的限制。 建造者模式的使用场景建造者（Builder）模式创建的是复杂对象，其产品的各个部分经常面临着剧烈的变化，但将它们组合在一起的算法却相对稳定，所以它通常在以下场合使用。1）创建的对象较复杂，由多个部件构成，各部件面临着复杂的变化，但构件间的建造顺序是稳定的。2）创建复杂对象的算法独立于该对象的组成部分以及它们的装配方式，即产品的构建过程和最终的表示是独立的。 建造者模式扩展建造者模式除了上面的用途外，在开发中还有一个常用的使用方式，就是当一个类构造器需要传入很多参数时，如果创建这个类的实例，代码可读性会非常差，而且很容易引入错误，此时就可以利用建造者模式进行重构。(参数多进行重构) public class Phone private String cpu; private String screen; private String memory; private String mainboard;​ public Phone(String cpu, String screen, String memory, String mainboard) this.cpu = cpu; this.screen = screen; this.memory = memory; this.mainboard = mainboard; ​ public String getCpu() return cpu; ​ public void setCpu(String cpu) this.cpu = cpu; ​ public String getScreen() return screen; ​ public void setScreen(String screen) this.screen = screen; ​ public String getMemory() return memory; ​ public void setMemory(String memory) this.memory = memory; ​ public String getMainboard() return mainboard; ​ public void setMainboard(String mainboard) this.mainboard = mainboard; ​ @Override public String toString() return Phone + cpu= + cpu + \\ + , screen= + screen + \\ + , memory= + memory + \\ + , mainboard= + mainboard + \\ + ; ​public class Client public static void main(String[] args) //构建Phone对象 Phone phone = new Phone(intel,三星屏幕,金士顿,华硕); System.out.println(phone); 上面在客户端代码中构建Phone对象，传递了四个参数，如果参数更多呢？代码的可读性及使用的成本就是比较高。 重构后代码： public class Phone ​ private String cpu; private String screen; private String memory; private String mainboard;​ private Phone(Builder builder) cpu = builder.cpu; screen = builder.screen; memory = builder.memory; mainboard = builder.mainboard; ​ public static final class Builder private String cpu; private String screen; private String memory; private String mainboard;​ public Builder() ​ public Builder cpu(String val) cpu = val; return this; public Builder screen(String val) screen = val; return this; public Builder memory(String val) memory = val; return this; public Builder mainboard(String val) mainboard = val; return this; public Phone build() return new Phone(this); @Override public String toString() return Phone + cpu= + cpu + \\ + , screen= + screen + \\ + , memory= + memory + \\ + , mainboard= + mainboard + \\ + ; ​public class Client public static void main(String[] args) Phone phone = new Phone.Builder() .cpu(intel) .mainboard(华硕) .memory(金士顿) .screen(三星) .build(); System.out.println(phone); 重构后的代码在使用起来更方便，可以实现链式调用，某种程度上也可以提高开发效率。从软件设计上，对程序员的要求比较高。 创建者模式对比——工厂模式和建造者模式的区别经过前面的学习，我们知道创建者模式主要包括：单例模式、原型模式、工厂方法模式、抽象工厂模式和建造者模式，这里我们主要对比：工厂方法模式和建造者模式、抽象工厂模式和建造者模式。 工厂方法模式和建造者模式对比工厂方法模式注重的是整体对象的创建方式；而建造者模式注重的是部件构建的过程，意在通过一步一步地精确构造创建出一个复杂的对象。我们举个简单例子来说明两者的差异，如要制造一个超人，如果使用工厂方法模式，直接产生出来的就是一个力大无穷、能够飞翔、内裤外穿的超人；而如果使用建造者模式，则需要组装手、头、脚、躯干等部分，然后再把内裤外穿，于是一个超人就诞生了。 抽象工厂模式和建造者模式对比抽象工厂模式实现对产品家族的创建，一个产品家族是这样的一系列产品：具有不同分类维度的产品组合，采用抽象工厂模式则是不需要关心构建过程，只关心什么产品由什么工厂生产即可。建造者模式则是要求按照指定的蓝图建造产品，它的主要目的是通过组装零配件而产生一个新产品。如果将抽象工厂模式看成汽车配件生产工厂，生产一个产品族的产品，那么建造者模式就是一个汽车组装工厂，通过对部件的组装可以返回一辆完整的汽车。因此，我们也可以将工厂模式和建造者模式进行结合使用，工厂模式负责生产实例，而建造者模式负责装配。 结构型模式结构型模式描述如何将类或对象按某种布局组成更大的结构。它分为类结构型模式和对象结构型模式，前者采用继承机制来组织接口和类，后者釆用组合或聚合来组合对象。由于组合关系或聚合关系比继承关系耦合度低，满足“合成复用原则”，所以对象结构型模式比类结构型模式具有更大的灵活性。结构型模式详细教程如下： 代理模式概述由于某些原因需要给某对象提供一个代理以控制对该对象的访问。这时，访问对象不适合或者不能直接引用目标对象，代理对象作为访问对象和目标对象之间的中介。Java中的代理按照代理类生成时机不同又分为静态代理和动态代理。静态代理代理类在编译期就生成，而动态代理代理类则是在Java运行时动态生成。动态代理又有JDK代理和CGLib代理两种。 结构代理（Proxy）模式分为三种角色： 抽象主题（Subject）类： 通过接口或抽象类声明真实主题和代理对象实现的业务方法。 真实主题（Real Subject）类： 实现了抽象主题中的具体业务，是代理对象所代表的真实对象，是最终要引用的对象。 代理（Proxy）类 ： 提供了与真实主题相同的接口，其内部含有对真实主题的引用，它可以访问、控制或扩展真实主题的功能。 静态代理如果要买火车票的话，需要去火车站买票，坐车到火车站，排队等一系列的操作，显然比较麻烦。而火车站在多个地方都有代售点，我们去代售点买票就方便很多了。这个例子其实就是典型的代理模式，火车站是目标对象，代售点是代理对象。类图如下：代码如下： //卖票接口public interface SellTickets void sell();​//火车站 火车站具有卖票功能，所以需要实现SellTickets接口public class TrainStation implements SellTickets ​ public void sell() System.out.println(火车站卖票); ​//代售点public class ProxyPoint implements SellTickets ​ private TrainStation station = new TrainStation();​ public void sell() System.out.println(代理点收取一些服务费用); station.sell(); ​//测试类public class Client public static void main(String[] args) ProxyPoint pp = new ProxyPoint(); pp.sell(); 从上面代码中可以看出测试类直接访问的是ProxyPoint类对象，也就是说ProxyPoint作为访问对象和目标对象的中介。同时也对sell方法进行了增强（代理点收取一些服务费用）。 JDK动态代理接下来我们使用动态代理实现上面案例，先说说JDK提供的动态代理。Java中提供了一个动态代理类Proxy，Proxy并不是我们上述所说的代理对象的类，而是提供了一个创建代理对象的静态方法（newProxyInstance方法）来获取代理对象。代码如下： //卖票接口public interface SellTickets void sell();​//火车站 火车站具有卖票功能，所以需要实现SellTickets接口public class TrainStation implements SellTickets ​ public void sell() System.out.println(火车站卖票); ​//代理工厂，用来创建代理对象public class ProxyFactory ​ private TrainStation station = new TrainStation();​ public SellTickets getProxyObject() //使用Proxy获取代理对象 /* newProxyInstance()方法参数说明： ClassLoader loader ： 类加载器，用于加载代理类，使用真实对象的类加载器即可 Class?[] interfaces ： 真实对象所实现的接口，代理模式真实对象和代理对象实现相同的接口 InvocationHandler h ： 代理对象的调用处理程序 */ SellTickets sellTickets = (SellTickets) Proxy.newProxyInstance(station.getClass().getClassLoader(), station.getClass().getInterfaces(), new InvocationHandler() /* InvocationHandler中invoke方法参数说明： proxy ： 代理对象 method ： 对应于在代理对象上调用的接口方法的 Method 实例 args ： 代理对象调用接口方法时传递的实际参数 */ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable ​ System.out.println(代理点收取一些服务费用(JDK动态代理方式)); //执行真实对象 Object result = method.invoke(station, args); return result; ); return sellTickets; ​//测试类public class Client public static void main(String[] args) //获取代理对象 ProxyFactory factory = new ProxyFactory(); SellTickets proxyObject = factory.getProxyObject(); proxyObject.sell(); 使用了动态代理，我们思考下面问题：ProxyFactory是代理类吗？ProxyFactory不是代理模式中所说的代理类，而代理类是程序在运行过程中动态的在内存中生成的类。通过阿里巴巴开源的Java 诊断工具（Arthas【阿尔萨斯】查看代理类的结构： package com.sun.proxy;​import com.itheima.proxy.dynamic.jdk.SellTickets;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;import java.lang.reflect.Proxy;import java.lang.reflect.UndeclaredThrowableException;​public final class $Proxy0 extends Proxy implements SellTickets private static Method m1; private static Method m2; private static Method m3; private static Method m0;​ public $Proxy0(InvocationHandler invocationHandler) super(invocationHandler); ​ static try m1 = Class.forName(java.lang.Object).getMethod(equals, Class.forName(java.lang.Object)); m2 = Class.forName(java.lang.Object).getMethod(toString, new Class[0]); m3 = Class.forName(com.itheima.proxy.dynamic.jdk.SellTickets).getMethod(sell, new Class[0]); m0 = Class.forName(java.lang.Object).getMethod(hashCode, new Class[0]); return; catch (NoSuchMethodException noSuchMethodException) throw new NoSuchMethodError(noSuchMethodException.getMessage()); catch (ClassNotFoundException classNotFoundException) throw new NoClassDefFoundError(classNotFoundException.getMessage()); ​ public final boolean equals(Object object) try return (Boolean)this.h.invoke(this, m1, new Object[]object); catch (Error | RuntimeException throwable) throw throwable; catch (Throwable throwable) throw new UndeclaredThrowableException(throwable); ​ public final String toString() try return (String)this.h.invoke(this, m2, null); catch (Error | RuntimeException throwable) throw throwable; catch (Throwable throwable) throw new UndeclaredThrowableException(throwable); ​ public final int hashCode() try return (Integer)this.h.invoke(this, m0, null); catch (Error | RuntimeException throwable) throw throwable; catch (Throwable throwable) throw new UndeclaredThrowableException(throwable); ​ public final void sell() try this.h.invoke(this, m3, null); return; catch (Error | RuntimeException throwable) throw throwable; catch (Throwable throwable) throw new UndeclaredThrowableException(throwable); 从上面的类中，我们可以看到以下几个信息：1）代理类（$Proxy0）实现了SellTickets。这也就印证了我们之前说的真实类和代理类实现同样的接口。2）代理类（$Proxy0）将我们提供了的匿名内部类对象传递给了父类 动态代理的执行流程是什么样？下面是摘取的重点代码： //程序运行过程中动态生成的代理类public final class $Proxy0 extends Proxy implements SellTickets private static Method m3;​ public $Proxy0(InvocationHandler invocationHandler) super(invocationHandler); ​ static m3 = Class.forName(com.itheima.proxy.dynamic.jdk.SellTickets).getMethod(sell, new Class[0]); ​ public final void sell() this.h.invoke(this, m3, null); ​//Java提供的动态代理相关类public class Proxy implements java.io.Serializable protected InvocationHandler h; protected Proxy(InvocationHandler h) this.h = h; ​//代理工厂类public class ProxyFactory ​ private TrainStation station = new TrainStation();​ public SellTickets getProxyObject() SellTickets sellTickets = (SellTickets) Proxy.newProxyInstance(station.getClass().getClassLoader(), station.getClass().getInterfaces(), new InvocationHandler() public Object invoke(Object proxy, Method method, Object[] args) throws Throwable ​ System.out.println(代理点收取一些服务费用(JDK动态代理方式)); Object result = method.invoke(station, args); return result; ); return sellTickets; ​​//测试访问类public class Client public static void main(String[] args) //获取代理对象 ProxyFactory factory = new ProxyFactory(); SellTickets proxyObject = factory.getProxyObject(); proxyObject.sell(); 执行流程如下：1）在测试类中通过代理对象调用sell()方法2）根据多态的特性，执行的是代理类（$Proxy0）中的sell()方法3）代理类（$Proxy0）中的sell()方法中又调用了InvocationHandler接口的子实现类对象的invoke方法4）invoke方法通过反射执行了真实对象所属类(TrainStation)中的sell()方法 CGLIB动态代理同样是上面的案例，我们再次使用CGLIB代理实现。如果没有定义SellTickets接口，只定义了TrainStation(火车站类)。很显然JDK代理是无法使用了，因为JDK动态代理要求必须定义接口，对接口进行代理。CGLIB是一个功能强大，高性能的代码生成包。它为没有实现接口的类提供代理，为JDK的动态代理提供了很好的补充。 dependency groupIdcglib/groupId artifactIdcglib/artifactId version2.2.2/version/dependency 代码如下： //火车站public class TrainStation ​ public void sell() System.out.println(火车站卖票); ​//代理工厂public class ProxyFactory implements MethodInterceptor ​ private TrainStation target = new TrainStation();​ public TrainStation getProxyObject() //创建Enhancer对象，类似于JDK动态代理的Proxy类，下一步就是设置几个参数 Enhancer enhancer =new Enhancer(); //设置父类的字节码对象 enhancer.setSuperclass(target.getClass()); //设置回调函数 enhancer.setCallback(this); //创建代理对象 TrainStation obj = (TrainStation) enhancer.create(); return obj; ​ /* intercept方法参数说明： o ： 代理对象 method ： 真实对象中的方法的Method实例 args ： 实际参数 methodProxy ：代理对象中的方法的method实例 */ public TrainStation intercept(Object o, Method method, Object[] args, MethodProxy methodProxy) throws Throwable System.out.println(代理点收取一些服务费用(CGLIB动态代理方式)); TrainStation result = (TrainStation) methodProxy.invokeSuper(o, args); return result; ​//测试类public class Client public static void main(String[] args) //创建代理工厂对象 ProxyFactory factory = new ProxyFactory(); //获取代理对象 TrainStation proxyObject = factory.getProxyObject();​ proxyObject.sell(); 三种代理的对比jdk代理和CGLIB代理使用CGLib实现动态代理，CGLib底层采用ASM字节码生成框架，使用字节码技术生成代理类，在JDK1.6之前比使用Java反射效率要高。唯一需要注意的是，CGLib不能对声明为final的类或者方法进行代理，因为CGLib原理是动态生成被代理类的子类。 在JDK1.6、JDK1.7、JDK1.8逐步对JDK动态代理优化之后，在调用次数较少的情况下，JDK代理效率高于CGLib代理效率，只有当进行大量调用的时候，JDK1.6和JDK1.7比CGLib代理效率低一点，但是到JDK1.8的时候，JDK代理效率高于CGLib代理。所以如果有接口使用JDK动态代理，如果没有接口使用CGLIB代理。 动态代理和静态代理动态代理与静态代理相比较，最大的好处是接口中声明的所有方法都被转移到调用处理器一个集中的方法中处理（InvocationHandler.invoke）。这样，在接口方法数量比较多的时候，我们可以进行灵活处理，而不需要像静态代理那样每一个方法进行中转。 如果接口增加一个方法，静态代理模式除了所有实现类需要实现这个方法外，所有代理类也需要实现此方法。增加了代码维护的复杂度。而动态代理不会出现该问题 代理模式优缺点优点：代理模式在客户端与目标对象之间起到一个中介作用和保护目标对象的作用；代理对象可以扩展目标对象的功能；代理模式能将客户端与目标对象分离，在一定程度上降低了系统的耦合度； 缺点：增加了系统的复杂度； 代理模式应用场景远程代理本地服务通过网络请求远程服务。为了实现本地到远程的通信，我们需要实现网络通信，处理其中可能的异常。为良好的代码设计和可维护性，我们将网络通信部分隐藏起来，只暴露给本地服务一个接口，通过该接口即可访问远程服务提供的功能，而不必过多关心通信部分的细节。防火墙（Firewall）代理当你将浏览器配置成使用代理功能时，防火墙就将你的浏览器的请求转给互联网；当互联网返回响应时，代理服务器再把它转给你的浏览器。保护（Protect or Access）代理控制对一个对象的访问，如果需要，可以给不同的用户提供不同级别的使用权限。 适配器模式适配器模式概述如果去欧洲国家去旅游的话，他们的插座如下图最左边，是欧洲标准。而我们使用的插头如下图最右边的。因此我们的笔记本电脑，手机在当地不能直接充电。所以就需要一个插座转换器，转换器第1面插入当地的插座，第2面供我们充电，这样使得我们的插头在当地能使用。生活中这样的例子很多，手机充电器（将220v转换为5v的电压），读卡器等，其实就是使用到了适配器模式。 适配器模式定义将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。适配器模式分为类适配器模式和对象适配器模式，前者类之间的耦合度比后者高，且要求程序员了解现有组件库中的相关组件的内部结构，所以应用相对较少些。 适配器模式结构适配器模式（Adapter）包含以下主要角色： 目标（Target）接口：当前系统业务所期待的接口，它可以是抽象类或接口。 适配者（Adaptee）类：它是被访问和适配的现存组件库中的组件接口。 适配器（Adapter）类：它是一个转换器，通过继承或引用适配者的对象，把适配者接口转换成目标接口，让客户按目标接口的格式访问适配者 类适配器模式实现方式：定义一个适配器类来实现当前系统的业务接口，同时又继承现有组件库中已经存在的组件。以读卡器为例现有一台电脑只能读取SD卡，而要读取TF卡中的内容的话就需要使用到适配器模式。创建一个读卡器，将TF卡中的内容读取出来。类图如下：代码如下： //SD卡的接口public interface SDCard //读取SD卡方法 String readSD(); //写入SD卡功能 void writeSD(String msg);​//SD卡实现类public class SDCardImpl implements SDCard public String readSD() String msg = sd card read a msg :hello word SD; return msg; ​ public void writeSD(String msg) System.out.println(sd card write msg : + msg); ​//电脑类public class Computer ​ public String readSD(SDCard sdCard) if(sdCard == null) throw new NullPointerException(sd card null); return sdCard.readSD(); ​//TF卡接口public interface TFCard //读取TF卡方法 String readTF(); //写入TF卡功能 void writeTF(String msg);​//TF卡实现类public class TFCardImpl implements TFCard ​ public String readTF() String msg =tf card read msg : hello word tf card; return msg; ​ public void writeTF(String msg) System.out.println(tf card write a msg : + msg); ​//定义适配器类（SD兼容TF）public class SDAdapterTF extends TFCardImpl implements SDCard ​ public String readSD() System.out.println(adapter read tf card ); return readTF(); ​ public void writeSD(String msg) System.out.println(adapter write tf card); writeTF(msg); ​//测试类public class Client public static void main(String[] args) Computer computer = new Computer(); SDCard sdCard = new SDCardImpl(); System.out.println(computer.readSD(sdCard));​ System.out.println(------------);​ SDAdapterTF adapter = new SDAdapterTF(); System.out.println(computer.readSD(adapter)); 类适配器模式违背了合成复用原则。类适配器是客户类有一个接口规范的情况下可用，反之不可用。 对象适配器模式实现方式：对象适配器模式可釆用将现有组件库中已经实现的组件引入适配器类中，该类同时实现当前系统的业务接口。以读卡器为例我们使用对象适配器模式将读卡器的案例进行改写。类图如下：代码如下：类适配器模式的代码，我们只需要修改适配器类（SDAdapterTF）和测试类。 //创建适配器对象（SD兼容TF）public class SDAdapterTF implements SDCard ​ private TFCard tfCard;​ public SDAdapterTF(TFCard tfCard) this.tfCard = tfCard; ​ public String readSD() System.out.println(adapter read tf card ); return tfCard.readTF(); ​ public void writeSD(String msg) System.out.println(adapter write tf card); tfCard.writeTF(msg); ​//测试类public class Client public static void main(String[] args) Computer computer = new Computer(); SDCard sdCard = new SDCardImpl(); System.out.println(computer.readSD(sdCard));​ System.out.println(------------);​ TFCard tfCard = new TFCardImpl(); SDAdapterTF adapter = new SDAdapterTF(tfCard); System.out.println(computer.readSD(adapter)); 注意：还有一个适配器模式是接口适配器模式。当不希望实现一个接口中所有的方法时，可以创建一个抽象类Adapter ，实现所有方法。而此时我们只需要继承该抽象类即可。 适配器模式应用场景 以前开发的系统存在满足新系统功能需求的类，但其接口同新系统的接口不一致。 使用第三方提供的组件，但组件接口定义和自己要求的接口定义不同。 JDK源码应用适配器模式案例解析Reader（字符流）、InputStream（字节流）的适配使用的是InputStreamReader。InputStreamReader继承自java.io包中的Reader，对他中的抽象的未实现的方法给出实现。如： public int read() throws IOException return sd.read();​public int read(char cbuf[], int offset, int length) throws IOException return sd.read(cbuf, offset, length); 如上代码中的sd（StreamDecoder类对象），在Sun的JDK实现中，实际的方法实现是对sun.nio.cs.StreamDecoder类的同名方法的调用封装。类结构图如下： 从上图可以看出：InputStreamReader是对同样实现了Reader的StreamDecoder的封装。StreamDecoder不是Java SE API中的内容，是Sun JDK给出的自身实现。但我们知道他们对构造方法中的字节流类（InputStream）进行封装，并通过该类进行了字节流和字符流之间的解码转换。结论从表层来看，InputStreamReader做了InputStream字节流类到Reader字符流之间的转换。而从如上Sun JDK中的实现类关系结构中可以看出，是StreamDecoder的设计实现在实际上采用了适配器模式。 装饰者模式装饰者模式概述我们先来看一个快餐店的例子。快餐店有炒面、炒饭这些快餐，可以额外附加鸡蛋、火腿、培根这些配菜，当然加配菜需要额外加钱，每个配菜的价钱通常不太一样，那么计算总价就会显得比较麻烦。下图是传统方式实现该功能的类图，从图中发现这里多处使用了继承： 使用继承的方式存在的问题：1）扩展性不好如果要再加一种配料（火腿肠），我们就会发现需要给FriedRice和FriedNoodles分别定义一个子类。如果要新增一个快餐品类（炒河粉）的话，就需要定义更多的子类。2）产生过多的子类，存在类爆炸可能 装饰者模式定义指在不改变现有对象结构的情况下，动态地给该对象增加一些职责（即增加其额外功能）的模式。 装饰者模式结构装饰（Decorator）模式中的角色： 抽象构件（Component）角色 ：定义一个抽象接口以规范准备接收附加责任的对象。 具体构件（Concrete Component）角色 ：实现抽象构件，通过装饰角色为其添加一些职责。 抽象装饰（Decorator）角色 ： 继承或实现抽象构件，并包含具体构件的实例，可以通过其子类扩展具体构件的功能。 具体装饰（ConcreteDecorator）角色 ：实现抽象装饰的相关方法，并给具体构件对象添加附加的责任。 装饰者模式案例我们使用装饰者模式对快餐店案例进行改进，体会装饰者模式的精髓。类图如下：代码如下： //快餐接口public abstract class FastFood private float price; private String desc;​ public FastFood() ​ public FastFood(float price, String desc) this.price = price; this.desc = desc; ​ public void setPrice(float price) this.price = price; ​ public float getPrice() return price; ​ public String getDesc() return desc; ​ public void setDesc(String desc) this.desc = desc; ​ public abstract float cost(); //获取价格​//炒饭public class FriedRice extends FastFood ​ public FriedRice() super(10, 炒饭); ​ public float cost() return getPrice(); ​//炒面public class FriedNoodles extends FastFood ​ public FriedNoodles() super(12, 炒面); ​ public float cost() return getPrice(); ​//配料类public abstract class Garnish extends FastFood ​ private FastFood fastFood;​ public FastFood getFastFood() return fastFood; ​ public void setFastFood(FastFood fastFood) this.fastFood = fastFood; ​ public Garnish(FastFood fastFood, float price, String desc) super(price,desc); this.fastFood = fastFood; ​//鸡蛋配料public class Egg extends Garnish ​ public Egg(FastFood fastFood) super(fastFood,1,鸡蛋); ​ public float cost() return getPrice() + getFastFood().getPrice(); ​ @Override public String getDesc() return super.getDesc() + getFastFood().getDesc(); ​//培根配料public class Bacon extends Garnish ​ public Bacon(FastFood fastFood) ​ super(fastFood,2,培根); ​ @Override public float cost() return getPrice() + getFastFood().getPrice(); ​ @Override public String getDesc() return super.getDesc() + getFastFood().getDesc(); ​//测试类public class Client public static void main(String[] args) //点一份炒饭 FastFood food = new FriedRice(); //花费的价格 System.out.println(food.getDesc() + + food.cost() + 元);​ System.out.println(========); //点一份加鸡蛋的炒饭 FastFood food1 = new FriedRice();​ food1 = new Egg(food1); //花费的价格 System.out.println(food1.getDesc() + + food1.cost() + 元);​ System.out.println(========); //点一份加培根的炒面 FastFood food2 = new FriedNoodles(); food2 = new Bacon(food2); //花费的价格 System.out.println(food2.getDesc() + + food2.cost() + 元); 好处装饰者模式可以带来比继承更加灵活性的扩展功能，使用更加方便，可以通过组合不同的装饰者对象来获取具有不同行为状态的多样化的结果。装饰者模式比继承更具良好的扩展性，完美的遵循开闭原则，继承是静态的附加责任，装饰者则是动态的附加责任。装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。 装饰者模式应用场景1、当不能采用继承的方式对系统进行扩充或者采用继承不利于系统扩展和维护时。不能采用继承的情况主要有两类：1）第一类是系统中存在大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长；2）第二类是因为类定义不能继承（如final类） 2、在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责。3、当对象的功能要求可以动态地添加，也可以再动态地撤销时。 JDK源码使用装饰者模式案例解析IO流中的包装类使用到了装饰者模式。BufferedInputStream，BufferedOutputStream，BufferedReader，BufferedWriter。 我们以BufferedWriter举例来说明，先看看如何使用BufferedWriter public class Demo public static void main(String[] args) throws Exception //创建BufferedWriter对象 //创建FileWriter对象 FileWriter fw = new FileWriter(C:\\\\Users\\\\Think\\\\Desktop\\\\a.txt); BufferedWriter bw = new BufferedWriter(fw);​ //写数据 bw.write(hello Buffered);​ bw.close(); 使用起来感觉确实像是装饰者模式，接下来看它们的结构： 小结BufferedWriter使用装饰者模式对Writer子实现类进行了增强，添加了缓冲区，提高了写数据的效率。 代理模式和装饰者模式的区别前面的教程我们已经学过了代理模式和装饰者模式，这两种模式存在一定的相似之处，也更主要的是不同点，我们在此总结如下（主要针对静态代理）： 静态代理和装饰者模式的区别：相同点： 都要实现与目标类相同的业务接口 在两个类中都要声明目标对象 都可以在不修改目标类的前提下增强目标方法 不同点： 目的不同 装饰者是为了增强目标对象 静态代理是为了保护和隐藏目标对象 获取目标对象构建的地方不同 装饰者是由外界传递进来，可以通过构造方法传递 静态代理是在代理类内部创建，以此来隐藏目标对象 桥接模式桥接模式概述现在有一个需求，需要创建不同的图形，并且每个图形都有可能会有不同的颜色。我们可以利用继承的方式来设计类的关系：我们可以发现有很多的类，假如我们再增加一个形状或再增加一种颜色，就需要创建更多的类。 试想，在一个有多种可能会变化的维度的系统中，用继承方式会造成类爆炸，扩展起来不灵活。每次在一个维度上新增一个具体实现都要增加多个子类。为了更加灵活的设计系统，我们此时可以考虑使用桥接模式。 桥接模式定义将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。 桥接模式结构桥接（Bridge）模式包含以下主要角色： 抽象化（Abstraction）角色：定义抽象类，并包含一个对实现化对象的引用。 扩展抽象化（Refined Abstraction）角色 ：是抽象化角色的子类，实现父类中的业务方法，并通过组合关系调用实现化角色中的业务方法。 实现化（Implementor）角色：定义实现化角色的接口，供扩展抽象化角色调用。 具体实现化（Concrete Implementor）角色 ：给出实现化角色接口的具体实现。 桥接模式Java代码案例【例】视频播放器需要开发一个跨平台视频播放器，可以在不同操作系统平台（如Windows、Mac、Linux等）上播放多种格式的视频文件，常见的视频格式包括RMVB、AVI、WMV等。该播放器包含了两个维度，适合使用桥接模式。 //视频文件（实现化角色）public interface VideoFile void decode(String fileName);​//avi文件（具体实现化角色 ）public class AVIFile implements VideoFile public void decode(String fileName) System.out.println(avi视频文件：+ fileName); ​//rmvb文件（具体实现化角色 ）public class REVBBFile implements VideoFile ​ public void decode(String fileName) System.out.println(rmvb文件： + fileName); ​//操作系统版本（抽象化角色）public abstract class OperatingSystemVersion ​ protected VideoFile videoFile;​ public OperatingSystemVersion(VideoFile videoFile) this.videoFile = videoFile; ​ public abstract void play(String fileName);​//Windows版本（扩展抽象化角色）public class Windows extends OperatingSystem ​ public Windows(VideoFile videoFile) super(videoFile); ​ public void play(String fileName) videoFile.decode(fileName); ​//mac版本（扩展抽象化角色）public class Mac extends OperatingSystemVersion ​ public Mac(VideoFile videoFile) super(videoFile); ​ public void play(String fileName) videoFile.decode(fileName); ​//测试类public class Client public static void main(String[] args) OperatingSystem os = new Windows(new AVIFile()); os.play(战狼3); 这样操作系统就可以和视频文件格式进行任意地组合，如果需要支持新的视频格式，只需要新建一个视频格式类实现VideoFile接口即可，新增操作系统类型，也只需新建一个操作系统类继承OperatingSystem 即可，两个维度扩展相互独立且简单灵活。 桥接模式好处1）桥接模式提高了系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统。如：如果现在还有一种视频文件类型wmv，我们只需要再定义一个类实现VideoFile接口即可，其他类不需要发生变化。2）实现细节对客户透明 桥接模式应用场景 当一个类存在两个独立变化的维度，且这两个维度都需要进行扩展时。 当一个系统不希望使用继承或因为多层次继承导致系统类的个数急剧增加时。 当一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性时。避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。 外观模式外观模式概述有些人可能炒过股票，但其实大部分人都不太懂，这种没有足够了解证券知识的情况下做股票是很容易亏钱的，刚开始炒股肯定都会想，如果有个懂行的帮帮手就好，其实基金就是个好帮手，支付宝里就有许多的基金，它将投资者分散的资金集中起来，交由专业的经理人进行管理，投资于股票、债券、外汇等领域，而基金投资的收益归持有者所有，管理机构收取一定比例的托管管理费用。 外观模式定义又名门面模式，是一种通过为多个复杂的子系统提供一个一致的接口，而使这些子系统更加容易被访问的模式。该模式对外有一个统一接口，外部应用程序不用关心内部子系统的具体的细节，这样会大大降低应用程序的复杂度，提高了程序的可维护性。外观（Facade）模式是“迪米特法则”的典型应用图中，左边为不适用外观模式的设计，有边为使用外观模式后的客户类和子系统的访问设计。 外观模式结构外观（Facade）模式包含以下主要角色： 外观（Facade）角色：为多个子系统对外提供一个共同的接口。 子系统（Sub System）角色：实现系统的部分功能，客户可以通过外观角色访问它。 外观模式Java实例【例】智能家电控制小明的爷爷已经60岁了，一个人在家生活：每次都需要打开灯、打开电视、打开空调；睡觉时关闭灯、关闭电视、关闭空调；操作起来都比较麻烦。所以小明给爷爷买了智能音箱，可以通过语音直接控制这些智能家电的开启和关闭。类图如下：代码如下： //灯类public class Light public void on() System.out.println(打开了灯....); ​ public void off() System.out.println(关闭了灯....); ​//电视类public class TV public void on() System.out.println(打开了电视....); ​ public void off() System.out.println(关闭了电视....); ​//控制类public class AirCondition public void on() System.out.println(打开了空调....); ​ public void off() System.out.println(关闭了空调....); ​//智能音箱public class SmartAppliancesFacade ​ private Light light; private TV tv; private AirCondition airCondition;​ public SmartAppliancesFacade() light = new Light(); tv = new TV(); airCondition = new AirCondition(); ​ public void say(String message) if(message.contains(打开)) on(); else if(message.contains(关闭)) off(); else System.out.println(我还听不懂你说的！！！); ​ //起床后一键开电器 private void on() System.out.println(起床了); light.on(); tv.on(); airCondition.on(); ​ //睡觉一键关电器 private void off() System.out.println(睡觉了); light.off(); tv.off(); airCondition.off(); ​//测试类public class Client public static void main(String[] args) //创建外观对象 SmartAppliancesFacade facade = new SmartAppliancesFacade(); //客户端直接与外观对象进行交互 facade.say(打开家电); facade.say(关闭家电); 外观模式的优缺点优点：降低了子系统与客户端之间的耦合度，使得子系统的变化不会影响调用它的客户类。对客户屏蔽了子系统组件，减少了客户处理的对象数目，并使得子系统使用起来更加容易。缺点不符合开闭原则，修改很麻烦，比如新增一个子系统，可能就需要修改外观类中的代码。 外观模式使用场景 对分层结构系统构建时，使用外观模式定义子系统中每层的入口点可以简化子系统之间的依赖关系。 当一个复杂系统的子系统很多时，外观模式可以为系统设计一个简单的接口供外界访问。 当客户端与多个子系统之间存在很大的联系时，引入外观模式可将它们分离，从而提高子系统的独立性和可移植性。 外观模式应用源码解析使用tomcat作为web容器时，接收浏览器发送过来的请求，tomcat会将请求信息封装成ServletRequest对象，如下图①处对象。但是大家想想ServletRequest是一个接口，它还有一个子接口HttpServletRequest，而我们知道该request对象肯定是一个HttpServletRequest对象的子实现类对象，到底是哪个类的对象呢？可以通过输出request对象，我们就会发现是一个名为RequestFacade的类的对象。 RequestFacade类就使用了外观模式。先看结构图： 为什么在此处使用外观模式呢？定义 RequestFacade 类，分别实现 ServletRequest ，同时定义私有成员变量 Request ，并且方法的实现调用 Request 的实现。然后，将 RequestFacade上转为 ServletRequest 传给 servlet 的 service 方法，这样即使在 servlet 中被下转为 RequestFacade ，也不能访问私有成员变量对象中的方法。既用了 Request ，又能防止其中方法被不合理的访问。 组合模式组合模式定义组合模式，又名部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。 组合模式概述对于这个图片肯定会非常熟悉，上图我们可以看做是一个文件系统，对于这样的结构我们称之为树形结构。在树形结构中可以通过调用某个方法来遍历整个树，当我们找到某个叶子节点后，就可以对叶子节点进行相关的操作。可以将这颗树理解成一个大的容器，容器里面包含很多的成员对象，这些成员对象即可是容器对象也可以是叶子对象。但是由于容器对象和叶子对象在功能上面的区别，使得我们在使用的过程中必须要区分容器对象和叶子对象，但是这样就会给客户带来不必要的麻烦，作为客户而已，它始终希望能够一致的对待容器对象和叶子对象。 组合模式结构组合模式主要包含三种角色： 抽象根节点（Component）：定义系统各层次对象的共有方法和属性，可以预先定义一些默认行为和属性。 树枝节点（Composite）：定义树枝节点的行为，存储子节点，组合树枝节点和叶子节点形成一个树形结构。 叶子节点（Leaf）：叶子节点对象，其下再无分支，是系统层次遍历的最小单位。 组合模式Java例子实现要实现该案例，我们先画出类图：代码实现：不管是菜单还是菜单项，都应该继承自统一的接口，这里姑且将这个统一的接口称为菜单组件。 //菜单组件 不管是菜单还是菜单项，都应该继承该类（抽象根节点）public abstract class MenuComponent ​ protected String name; protected int level;​ //添加菜单 public void add(MenuComponent menuComponent) throw new UnsupportedOperationException(); ​ //移除菜单 public void remove(MenuComponent menuComponent) throw new UnsupportedOperationException(); ​ //获取指定的子菜单 public MenuComponent getChild(int i) throw new UnsupportedOperationException(); ​ //获取菜单名称 public String getName() return name; ​ public void print() throw new UnsupportedOperationException(); 这里的MenuComponent定义为抽象类，因为有一些共有的属性和行为要在该类中实现，Menu和MenuItem类就可以只覆盖自己感兴趣的方法，而不用搭理不需要或者不感兴趣的方法，举例来说，Menu类可以包含子菜单，因此需要覆盖add()、remove()、getChild()方法，但是MenuItem就不应该有这些方法。这里给出的默认实现是抛出异常，你也可以根据自己的需要改写默认实现。 // 子菜单项（树枝节点）public class Menu extends MenuComponent ​ private ListMenuComponent menuComponentList;​ public Menu(String name,int level) this.level = level; this.name = name; menuComponentList = new ArrayListMenuComponent(); ​ @Override public void add(MenuComponent menuComponent) menuComponentList.add(menuComponent); ​ @Override public void remove(MenuComponent menuComponent) menuComponentList.remove(menuComponent); ​ @Override public MenuComponent getChild(int i) return menuComponentList.get(i); ​ @Override public void print() ​ // 方便打印出层级效果 for (int i = 1; i level; i++) System.out.print(--); System.out.println(name); for (MenuComponent menuComponent : menuComponentList) menuComponent.print(); Menu类已经实现了除了getName方法的其他所有方法，因为Menu类具有添加菜单，移除菜单和获取子菜单的功能。 // 子菜单（叶子节点）public class MenuItem extends MenuComponent ​ public MenuItem(String name,int level) this.name = name; this.level = level; ​ @Override public void print() // 方便打印出层级效果 for (int i = 1; i level; i++) System.out.print(--); System.out.println(name); MenuItem是菜单项，不能再有子菜单，所以添加菜单，移除菜单和获取子菜单的功能并不能实现。 组合模式的分类在使用组合模式时，根据抽象构件类的定义形式，我们可将组合模式分为透明组合模式和安全组合模式两种形式。 透明组合模式透明组合模式中，抽象根节点角色中声明了所有用于管理成员对象的方法，比如在示例中 MenuComponent 声明了 add、remove 、getChild 方法，这样做的好处是确保所有的构件类都有相同的接口。透明组合模式也是组合模式的标准形式。透明组合模式的缺点是不够安全，因为叶子对象和容器对象在本质上是有区别的，叶子对象不可能有下一个层次的对象，即不可能包含成员对象，因此为其提供 add()、remove() 等方法是没有意义的，这在编译阶段不会出错，但在运行阶段如果调用这些方法可能会出错（如果没有提供相应的错误处理代码） 安全组合模式在安全组合模式中，在抽象构件角色中没有声明任何用于管理成员对象的方法，而是在树枝节点 Menu 类中声明并实现这些方法。安全组合模式的缺点是不够透明，因为叶子构件和容器构件具有不同的方法，且容器构件中那些用于管理成员对象的方法没有在抽象构件类中定义，因此客户端不能完全针对抽象编程，必须有区别地对待叶子构件和容器构件。组合模式优点 组合模式可以清楚地定义分层次的复杂对象，表示对象的全部或部分层次，它让客户端忽略了层次的差异，方便对整个层次结构进行控制。 客户端可以一致地使用一个组合结构或其中单个对象，不必关心处理的是单个对象还是整个组合结构，简化了客户端代码。 在组合模式中增加新的树枝节点和叶子节点都很方便，无须对现有类库进行任何修改，符合“开闭原则”。 组合模式为树形结构的面向对象实现提供了一种灵活的解决方案，通过叶子节点和树枝节点的递归组合，可以形成复杂的树形结构，但对树形结构的控制却非常简单。 组合模式的应用场景组合模式正是应树形结构而生，所以组合模式的使用场景就是出现树形结构的地方。比如：文件目录显示，多级目录呈现等树形结构数据的操作。 享元模式享元模式定义运用共享技术来有效地支持大量细粒度对象的复用。它通过共享已经存在的对象来大幅度减少需要创建的对象数量、避免大量相似对象的开销，从而提高系统资源的利用率。 享元模式结构享元（Flyweight ）模式中存在以下两种状态： 内部状态：即不会随着环境的改变而改变的可共享部分。 外部状态：指随环境改变而改变的不可以共享的部分。享元模式的实现要领就是区分应用中的这两种状态，并将外部状态外部化。 享元模式的主要有以下角色： 抽象享元角色（Flyweight）：通常是一个接口或抽象类，在抽象享元类中声明了具体享元类公共的方法，这些方法可以向外界提供享元对象的内部数据（内部状态），同时也可以通过这些方法来设置外部数据（外部状态）。 具体享元（Concrete Flyweight）角色 ：它实现了抽象享元类，称为享元对象；在具体享元类中为内部状态提供了存储空间。通常我们可以结合单例模式来设计具体享元类，为每一个具体享元类提供唯一的享元对象。 非享元（Unsharable Flyweight）角色 ：并不是所有的抽象享元类的子类都需要被共享，不能被共享的子类可设计为非共享具体享元类；当需要一个非共享具体享元类的对象时可以直接通过实例化创建。 享元工厂（Flyweight Factory）角色 ：负责创建和管理享元角色。当客户对象请求一个享元对象时，享元工厂检査系统中是否存在符合要求的享元对象，如果存在则提供给客户；如果不存在的话，则创建一个新的享元对象。 享元模式Java实例【例】俄罗斯方块下面的图片是众所周知的俄罗斯方块中的一个个方块，如果在俄罗斯方块这个游戏中，每个不同的方块都是一个实例对象，这些对象就要占用很多的内存空间，下面利用享元模式进行实现。先来看采用享元模式设计的类图： 代码如下：俄罗斯方块有不同的形状，我们可以对这些形状向上抽取出AbstractBox，用来定义共性的属性和行为。 // 抽象享元角色public abstract class AbstractBox //获取图形的方法 public abstract String getShape();​ //显示图形及颜色 public void display(String color) System.out.println(方块形状： + this.getShape() + 颜色： + color); 接下来就是定义不同的形状了，IBox类、LBox类、OBox类等。 // 这3个都是具体享元角色public class IBox extends AbstractBox ​ @Override public String getShape() return I; ​public class LBox extends AbstractBox ​ @Override public String getShape() return L; ​public class OBox extends AbstractBox ​ @Override public String getShape() return O; 提供了一个工厂类（BoxFactory），用来管理享元对象（也就是AbstractBox子类对象），该工厂类对象只需要一个，所以可以使用单例模式。并给工厂类提供一个获取形状的方法。 // 享元工厂角色，这里采用的是饿汉式单例public class BoxFactory ​ //享元池 private static HashMapString, AbstractBox map;​ //在构造方法中进行初始化操作 private BoxFactory() map = new HashMapString, AbstractBox(); AbstractBox iBox = new IBox(); AbstractBox lBox = new LBox(); AbstractBox oBox = new OBox(); map.put(I, iBox); map.put(L, lBox); map.put(O, oBox); ​//提供一个方法获取该工厂类对象 public static final BoxFactory getInstance() return SingletonHolder.INSTANCE; ​ private static class SingletonHolder private static final BoxFactory INSTANCE = new BoxFactory(); ​//根据名称获取图形对象 public AbstractBox getBox(String key) return map.get(key); 最后，我们提供测试类，进行测试享元模式效果： // 享元工厂角色，这里采用的是饿汉式单例public class BoxFactory ​ //享元池 private static HashMapString, AbstractBox map;​ //在构造方法中进行初始化操作 private BoxFactory() map = new HashMapString, AbstractBox(); AbstractBox iBox = new IBox(); AbstractBox lBox = new LBox(); AbstractBox oBox = new OBox(); map.put(I, iBox); map.put(L, lBox); map.put(O, oBox); ​//提供一个方法获取该工厂类对象 public static final BoxFactory getInstance() return SingletonHolder.INSTANCE; ​ private static class SingletonHolder private static final BoxFactory INSTANCE = new BoxFactory(); ​//根据名称获取图形对象 public AbstractBox getBox(String key) return map.get(key); 最后，我们提供测试类，进行测试享元模式效果： public class Client public static void main(String[] args) //获取I图形对象 AbstractBox box1 = BoxFactory.getInstance().getShape(I); box1.display(灰色); //获取L图形对象 AbstractBox box2 = BoxFactory.getInstance().getShape(L); box2.display(绿色); //获取O图形对象 AbstractBox box3 = BoxFactory.getInstance().getShape(O); box3.display(灰色); //获取O图形对象 AbstractBox box4 = BoxFactory.getInstance().getShape(O); box4.display(红色); System.out.println(两次获取到的O图形对象是否是同一个对象： + (box3 == box4)); 运行测试类，结果如下： 享元模式优缺点和使用场景优点 极大减少内存中相似或相同对象数量，节约系统资源，提供系统性能 享元模式中的外部状态相对独立，且不影响内部状态 缺点为了使对象可以共享，需要将享元对象的部分状态外部化，分离内部状态和外部状态，使程序逻辑复杂 享元模式使用场景 一个系统有大量相同或者相似的对象，造成内存的大量耗费。 对象的大部分状态都可以外部化，可以将这些外部状态传入对象中。 在使用享元模式时需要维护一个存储享元对象的享元池，而这需要耗费一定的系统资源，因此，应当在需要多次重复使用享元对象时才值得使用享元模式。 JDK源码应用享元模式解析Integer类使用了享元模式。我们先看下面的例子： public class Demo public static void main(String[] args) Integer i1 = 127; Integer i2 = 127;​ System.out.println(i1和i2对象是否是同一个对象？ + (i1 == i2));​ Integer i3 = 128; Integer i4 = 128;​ System.out.println(i3和i4对象是否是同一个对象？ + (i3 == i4)); 运行上面代码，结果如下： i1和i2对象是否是同一个对象？truei3和i4对象是否是同一个对象？false 为什么第一个输出语句输出的是true，第二个输出语句输出的是false？通过反编译软件进行反编译，代码如下： public class Demo public static void main(String[] args) Integer i1 = Integer.valueOf((int)127); Integer i2 Integer.valueOf((int)127); System.out.println((String)new StringBuilder().append((String)i1\\u548ci2\\u5bf9\\u8c61\\u662f\\u5426\\u662f\\u540c\\u4e00\\u4e2a\\u5bf9\\u8c61\\uff1f).append((boolean)(i1 == i2)).toString()); Integer i3 = Integer.valueOf((int)128); Integer i4 = Integer.valueOf((int)128); System.out.println((String)new StringBuilder().append((String)i3\\u548ci4\\u5bf9\\u8c61\\u662f\\u5426\\u662f\\u540c\\u4e00\\u4e2a\\u5bf9\\u8c61\\uff1f).append((boolean)(i3 == i4)).toString());","tags":["Java基础","设计开发"],"categories":["Java","设计开发"]}]